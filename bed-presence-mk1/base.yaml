# Override these values by including a substitutions section in the yaml config that imports this package
substitutions:
  # Calibrate Trigger Percentile
  # This controls how the trigger threshold is set during calibration. During calibration, the unoccupied and occupied
  # pressure values are determined. This is the percentage of the difference between those values required to trigger
  # the "occupied" state.
  #     - 0.75  Requires 75% of the occupied pressure to trigger (Default)
  #     - 0.50   Set trigger exactly in the middle of unoccupied and occupied pressures
  #     - 0.25  More sensitive, likely to be triggered by partner
  trigger_percentile: '0.75'

  # Fast Sensor Delay
  # This controls how long the "Fast" sensor must register "unoccupied" before reporting. "occupied" is reported
  # instantly. Without any delay, the sensor will register frequent false negatives as you shift in bed.
  #     - 2s    Same response as standard sensor
  #     - 500ms Good starting point for getting speed without too many false negatives (Default)
  #     - 0ms   No delay, expect frequent false negatives
  fast_delayed_off: '500ms'

  # Standard Sensor Delay
  # This controls how long the standard sensor must register "unoccupied" or "occupied" before reporting. This
  # ensures stability and prevents shifting in bed from registering "unoccupied".
  standard_delayed_on_off: '2s'

  # Reporting Delta
  # The sensor must change by this amount before an update is sent (or the reporting_duration_max has been hit)
  #     - 10.0  Only report very large changes
  #     - 1.0   Relatively sensitive with much less reporting (default)
  #     - 0.1   Very sensitive, will report frequently
  reporting_delta: '1.0'

  # Reporting Duration (Max)
  # The max amount of time between sensor reports (even if the value hasn't changed)
  reporting_duration_max: '60s'

packages:
  left_bed_sensor: !include
    file: sensor.yaml
    vars:
      sensor_name: Left
      sensor_id: left
      sensor_gpio: GPIO10

  right_bed_sensor: !include
    file: sensor.yaml
    vars:
      sensor_name: Right
      sensor_id: right
      sensor_gpio: GPIO20

sensor:
- platform: wifi_signal # Reports the WiFi signal strength in dB
  name: WiFi Signal dB
  id: wifi_signal_db
  update_interval: 60s

- platform: copy # Reports the WiFi signal strength in %
  source_id: wifi_signal_db
  name: "WiFi Signal Percent"
  id: wifi_signal_percent
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "%"
  entity_category: "diagnostic"
  device_class: ""

- platform: uptime
  type: seconds
  id: bed_presence_uptime
  name: "Uptime"

binary_sensor:
- platform: template
  name: Bed Occupied Both (Fast)
  id: bed_occupied_both_fast
  device_class: occupancy
  icon: mdi:bunk-bed
  disabled_by_default: true
  lambda: return id(bed_occupied_left_fast).state && id(bed_occupied_right_fast).state;

- platform: template
  name: Bed Occupied Either (Fast)
  id: bed_occupied_either_fast
  device_class: occupancy
  icon: mdi:bunk-bed
  disabled_by_default: true
  lambda: return id(bed_occupied_left_fast).state || id(bed_occupied_right_fast).state;

- platform: template
  name: Bed Occupied Both
  id: bed_occupied_both
  device_class: occupancy
  icon: mdi:bunk-bed
  lambda: return id(bed_occupied_left).state && id(bed_occupied_right).state;

- platform: template
  name: Bed Occupied Either
  id: bed_occupied_either
  device_class: occupancy
  icon: mdi:bunk-bed
  lambda: return id(bed_occupied_left).state || id(bed_occupied_right).state;

button:
- platform: restart
  name: Restart
  id: btn_restart
  entity_category: "diagnostic"
