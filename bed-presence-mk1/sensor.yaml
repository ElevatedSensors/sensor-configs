# Override these values by including a substitutions section in the yaml config that imports this package
substitutions:
  # Calibrate Trigger Percentile
  # This controls how the trigger threshold is set during calibration. During calibration, the unoccupied and occupied
  # pressure values are determined. This is the percentage of the difference between those values required to trigger
  # the "occupied" state.
  #     - 0.75  Requires 75% of the occupied pressure to trigger (Default)
  #     - 0.50   Set trigger exactly in the middle of unoccupied and occupied pressures
  #     - 0.25  More sensitive, likely to be triggered by partner
  trigger_percentile: '0.75'

  # Fast Sensor Delay
  # This controls how long the "Fast" sensor must register "unoccupied" before reporting. "occupied" is reported
  # instantly. Without any delay, the sensor will register frequent false negatives as you shift in bed.
  #     - 2s    Same response as standard sensor
  #     - 500ms Good starting point for getting speed without too many false negatives (Default)
  #     - 0ms   No delay, expect frequent false negatives
  fast_delayed_off: '500ms'

  # Standard Sensor Delay
  # This controls how long the standard sensor must register "unoccupied" or "occupied" before reporting. This
  # ensures stability and prevents shifting in bed from registering "unoccupied".
  standard_delayed_on_off: '2s'

  # Reporting Delta
  # The sensor must change by this amount before an update is sent (or the reporting_duration_max has been hit)
  #     - 10.0  Only report very large changes
  #     - 1.0   Relatively sensitive with much less reporting (default)
  #     - 0.1   Very sensitive, will report frequently
  reporting_delta: '1.0'

  # Reporting Duration (Max)
  # The max amount of time between sensor reports (even if the value hasn't changed)
  reporting_duration_max: '60s'

binary_sensor:
- platform: template
  name: Bed Occupied ${sensor_name} (Fast)
  id: bed_occupied_${sensor_id}_fast
  device_class: occupancy
  icon: mdi:bed
  disabled_by_default: true
  filters:
  - delayed_off: ${fast_delayed_off}  # prevent shifting in bed from registering "off"
  lambda: return id(bed_sensor_${sensor_id}).state > id(val_trigger_${sensor_id}).state;

- platform: template
  name: Bed Occupied ${sensor_name}
  id: bed_occupied_${sensor_id}
  device_class: occupancy
  icon: mdi:bed
  filters:
  - delayed_on_off: ${standard_delayed_on_off}  # ensure stability
  lambda: return id(bed_sensor_${sensor_id}).state > id(val_trigger_${sensor_id}).state;

- platform: template
  name: Bed Occupied ${sensor_name} (Averaged)
  id: bed_occupied_${sensor_id}_averaged
  device_class: occupancy
  icon: mdi:bed
  lambda: return id(bed_sensor_${sensor_id}_averaged).state > id(val_trigger_${sensor_id}).state;

sensor:
- platform: pulse_counter
  pin: ${sensor_gpio}
  name: ${sensor_name} Pressure Raw
  id: bed_sensor_${sensor_id}_raw
  update_interval: 0.5s
  unit_of_measurement: '%'
  icon: mdi:gauge
  filters:
  - calibrate_linear:             # scale pulses/minute to 0->100%
      method: least_squares
      datapoints:
        - 408000 -> 100.0         # 6800Hz (sensor shorted/0ohms)
        - 276000 -> 0.0           # 4600Hz (breakforce/10k)
  # - clamp:
  #     max_value: 100.0
  #     min_value: 0.0
  # - or:
  #   - delta: ${reporting_delta}           # only send if sensor changes by `reporting_delta` (eliminate sensor noise)
  #   - throttle: ${reporting_duration_max} # but still update every `reporting_duration_max`
# - platform: copy
#   source_id: bed_sensor_${sensor_id}
#   name: ${sensor_name} Pressure Calibrated
#   id: bed_sensor_${sensor_id}_calibrated
#   filters:
#     - lambda: return float(id(val_unoccupied_${sensor_id})).state+((x/100)*(id(val_occupied_${sensor_id}).state - float(id(val_unoccupied_${sensor_id}).state)));
- platform: copy
  source_id: bed_sensor_${sensor_id}_raw
  name: ${sensor_name} Pressure
  id: bed_sensor_${sensor_id}
  filters:
    # - lambda: return x;
    - or:
      - delta: ${reporting_delta}           # only send if sensor changes by `reporting_delta` (eliminate sensor noise)
      - throttle: ${reporting_duration_max} # but still update every `reporting_duration_max`
- platform: copy
  source_id: bed_sensor_${sensor_id}_raw
  name: ${sensor_name} Pressure Averaged
  id: bed_sensor_${sensor_id}_averaged
  filters:
    # - lambda: return x;
    - sliding_window_moving_average:
        window_size: 10
        send_every: 1
    - or:
      - delta: ${reporting_delta}           # only send if sensor changes by `reporting_delta` (eliminate sensor noise)
      - throttle: ${reporting_duration_max} # but still update every `reporting_duration_max`

number:
- platform: template
  name: ${sensor_name} Unoccupied Pressure
  id: val_unoccupied_${sensor_id}
  icon: mdi:gauge-empty
  unit_of_measurement: '%'
  entity_category: diagnostic
  optimistic: true
  restore_value: true
  initial_value: 0
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger
        // id(val_unoccupied_status_${sensor_id}).publish_state(x);
        id(update_trigger_${sensor_id})->execute();
- platform: template
  name: ${sensor_name} Occupied Pressure
  id: val_occupied_${sensor_id}
  icon: mdi:gauge-full
  unit_of_measurement: '%'
  entity_category: diagnostic
  optimistic: true
  restore_value: true
  initial_value: 100
  min_value: 0
  max_value: 100
  step: 0.1
  on_value:
    then:
    - lambda: |-  # Update status and trigger
        // id(val_occupied_status_${sensor_id}).publish_state(x);
        id(update_trigger_${sensor_id})->execute();
- platform: template
  name: ${sensor_name} Trigger Pressure
  id: val_trigger_${sensor_id}
  optimistic: true
  restore_value: true
  initial_value: 50
  min_value: 0
  max_value: 100
  step: 0.1
  icon: mdi:gauge
  unit_of_measurement: '%'
  entity_category: config

button:
- platform: template
  name: Calibrate ${sensor_name} Unoccupied
  id: calibration_${sensor_id}_set_unoccupied
  icon: mdi:bed-empty
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_unoccupied_${sensor_id}
        value: !lambda return id(bed_sensor_${sensor_id}).state;
- platform: template
  name: Calibrate ${sensor_name} Occupied
  id: calibration_${sensor_id}_set_occupied
  icon: mdi:bed
  entity_category: config
  on_press:
    then:
    - number.set:
        id: val_occupied_${sensor_id}
        value: !lambda return id(bed_sensor_${sensor_id}).state;

script:
- id: update_trigger_${sensor_id}
  mode: queued
  then:
  - lambda: |-  # Set trigger to x% of difference between min/max
      float unoccupied_pressure = id(val_unoccupied_${sensor_id}).state;
      float occupied_pressure = id(val_occupied_${sensor_id}).state;

      // calculate new trigger value
      float trigger_pressure = unoccupied_pressure + ((occupied_pressure - unoccupied_pressure) * float(${trigger_percentile}));

      // round to 2 decimal places
      trigger_pressure = round(trigger_pressure * 100)/100.0;

      // set value
      auto call = id(val_trigger_${sensor_id}).make_call();
      call.set_value(trigger_pressure);
      call.perform();
