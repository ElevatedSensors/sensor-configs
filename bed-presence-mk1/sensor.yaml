# Override these values by including a substitutions section in the yaml config that imports this package
substitutions:
  # Calibrate Trigger Percentile
  # This controls how the trigger threshold is set during calibration. During calibration, the unoccupied and occupied
  # pressure values are determined. This is the percentage of the difference between those values required to trigger
  # the "occupied" state.
  #     - 0.75  Requires 75% of the occupied pressure to trigger (DEFAULT)
  #     - 0.50   Set trigger exactly in the middle of unoccupied and occupied pressures
  #     - 0.25  More sensitive, likely to be triggered by partner
  trigger_percentile: '0.75'

  # Fast Sensor Delay
  # This controls how long the "Fast" sensor must register "unoccupied" before reporting. "occupied" is reported
  # instantly. Without any delay, the sensor will register frequent false negatives as you shift in bed.
  #     - 2s    Same response as standard sensor
  #     - 500ms Good starting point for getting speed without too many false negatives (DEFAULT)
  #     - 0ms   No delay, expect frequent false negatives
  fast_delayed_off: '500ms'

  # Standard Sensor Delay
  # This controls how long the standard sensor must register "unoccupied" or "occupied" before reporting. This ensures
  # stability and prevents shifting in bed from registering "unoccupied".
  standard_delayed_on_off: '2s'

  # Reporting Delta
  # The sensor must change by this amount before an update is sent (or the reporting_duration_max has been hit)
  #     - 10.0  Only report very large changes
  #     - 1.0   Relatively sensitive with much less reporting (DEFAULT)
  #     - 0.1   Very sensitive, will report frequently
  reporting_delta: '1.0'

  # Reporting Duration (Max)
  # The max amount of time between sensor reports (even if the value hasn't changed)
  reporting_duration_max: '180s'

  # Window Averaging Samples
  # Add a sliding window moving average to the incoming sensor samples. This specifies the number of samples to average
  # over. Each sample is 1/2 second.
  #     - 1   Don't perform averaging (DEFAULT)
  #     - 2   Average over 2 samples (1 second)
  #     - 10  Average over 10 samples (5 seconds)
  averaging_window_samples: '1'

  # # Linear Calibration Points
  # # Change the linear calibration points for the FSR sensor. These values correspond with the raw pulses per minute from
  # # the pulse_counter. Only mess with this if you know what you're doing.
  # calibrate_linear_100: '408000'
  # calibrate_linear_0: '276000'

binary_sensor:
  - platform: template
    name: Bed Occupied ${sensor_name} (Fast)
    id: bed_occupied_${sensor_id}_fast
    device_class: occupancy
    icon: mdi:bed
    disabled_by_default: true
    filters:
      - delayed_off: ${fast_delayed_off}  # prevent shifting in bed from registering "off"
    lambda: return id(bed_sensor_${sensor_id}).state > id(val_trigger_${sensor_id}).state;

  - platform: template
    name: Bed Occupied ${sensor_name}
    id: bed_occupied_${sensor_id}
    device_class: occupancy
    icon: mdi:bed
    filters:
      - delayed_on_off: ${standard_delayed_on_off}  # ensure stability
    lambda: return id(bed_sensor_${sensor_id}).state > id(val_trigger_${sensor_id}).state;

sensor:
  - platform: pulse_counter
    pin: ${sensor_gpio}
    name: ${sensor_name} Pressure
    id: bed_sensor_${sensor_id}
    update_interval: 0.5s
    unit_of_measurement: '%'
    icon: mdi:gauge
    filters:
      # - calibrate_linear:                         # scale pulses/minute to 0->100%
      #     method: least_squares
      #     datapoints:
      #       - ${calibrate_linear_100} -> 100.0    # 6800Hz (sensor shorted/0ohms)
      #       - ${calibrate_linear_0} -> 0.0        # 4600Hz (breakforce/10k)
      - sliding_window_moving_average:
          window_size: ${averaging_window_samples}
          send_every: 1
      - or:
          - delta: ${reporting_delta}             # only send if sensor changes by `reporting_delta` (eliminate sensor noise)
          - throttle: ${reporting_duration_max}   # but still update every `reporting_duration_max`
      - lambda: |-                                # scale pulses/minute to 0%->100%
          // 408000ppm = 6800Hz (sensor shorted/0ohms)
          // 276000ppm = 4600Hz (breakforce/10kohms)
          // 0ppm      = 0Hz    (use full range)
          float calibrate_100 = 408000;
          float calibrate_0 = id(full_range).state ? 0 : 276000;

          float val_cal_top = (x - calibrate_0) * 100;
          float val_cal_bot = calibrate_100 - calibrate_0;

          return val_cal_top/val_cal_bot;
      - clamp:
          min_value: 0

number:
  - platform: template
    name: ${sensor_name} Unoccupied Pressure
    id: val_unoccupied_${sensor_id}
    icon: mdi:gauge-empty
    unit_of_measurement: '%'
    entity_category: diagnostic
    optimistic: true
    restore_value: true
    initial_value: 0
    min_value: 0
    max_value: 110
    step: 1.0
    mode: box
    on_value:
      then:
        - lambda: |-  # Update trigger
            id(update_trigger_${sensor_id})->execute();
  - platform: template
    name: ${sensor_name} Occupied Pressure
    id: val_occupied_${sensor_id}
    icon: mdi:gauge-full
    unit_of_measurement: '%'
    entity_category: diagnostic
    optimistic: true
    restore_value: true
    initial_value: 100
    min_value: 0
    max_value: 110
    step: 1.0
    mode: box
    on_value:
      then:
        - lambda: |-  # Update trigger
            id(update_trigger_${sensor_id})->execute();
  - platform: template
    name: ${sensor_name} Trigger Pressure
    id: val_trigger_${sensor_id}
    optimistic: true
    restore_value: true
    initial_value: 50
    min_value: 0
    max_value: 110
    step: 1.0
    mode: box
    icon: mdi:gauge
    unit_of_measurement: '%'
    entity_category: config

button:
  - platform: template
    name: Calibrate ${sensor_name} Unoccupied
    id: calibration_${sensor_id}_set_unoccupied
    icon: mdi:bed-empty
    entity_category: config
    on_press:
      then:
        - number.set:
            id: val_unoccupied_${sensor_id}
            # round to 2 decimal places
            value: !lambda return round(id(bed_sensor_${sensor_id}).state * 100)/100.0;
  - platform: template
    name: Calibrate ${sensor_name} Occupied
    id: calibration_${sensor_id}_set_occupied
    icon: mdi:bed
    entity_category: config
    on_press:
      then:
        - number.set:
            id: val_occupied_${sensor_id}
            # round to 2 decimal places
            value: !lambda return round(id(bed_sensor_${sensor_id}).state * 100)/100.0;

script:
  - id: update_trigger_${sensor_id}
    mode: queued
    then:
      - lambda: |-  # Set trigger to x% of difference between min/max
          float unoccupied_pressure = id(val_unoccupied_${sensor_id}).state;
          float occupied_pressure = id(val_occupied_${sensor_id}).state;

          // calculate new trigger value
          float trigger_pressure = unoccupied_pressure + ((occupied_pressure - unoccupied_pressure) * float(${trigger_percentile}));

          // round to 2 decimal places
          trigger_pressure = round(trigger_pressure * 100)/100.0;

          // set value
          auto call = id(val_trigger_${sensor_id}).make_call();
          call.set_value(trigger_pressure);
          call.perform();
