name: Build and Publish ESPHome firmware

on:
  workflow_call:
    inputs:
      files:
        description: Comma-separated list of files to build.
        required: true
        type: string
      name:
        description: Name of the firmware to publish.
        required: false
        type: string
        default: ESPHome
      clean:
        description: Remove deleted files from the build
        required: false
        type: boolean
        default: true
      manifest_filename:
        description: Filename of the manifest to write.
        required: false
        type: string
        default: manifest.json
      esphome_version:
        description: Version of ESPHome to build for.
        required: false
        type: string
        default: latest
      build_fw:
        description: Build the firmware
        required: false
        type: boolean
        default: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
    steps:
      - id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -Rcn 'inputs | . / ","')
          # echo ::set-output name=files::$files
          echo "files=$files" >> $GITHUB_OUTPUT

  build:
    name: Build ESPHome binary for ${{ matrix.file }}
    if: ${{ inputs.build_fw }}  # Don't build if there haven't been any fw changes
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    # outputs:
    #   esphome-version: ${{ steps.esphome-build.outputs.version }}
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: esphome/build-action@v3.2.0
        id: esphome-build
        with:
          yaml_file: ${{ matrix.file }}
          version: ${{ inputs.esphome_version }}
      - run: |
          mkdir output
          mv "${{ steps.esphome-build.outputs.name }}" output/
      - name: Print output folder structure
        run: find output/
      - name: Create single manifest.json
        run: |
          jq -s '{"name": "${{ inputs.name }}", "version": "${{ steps.esphome-build.outputs.version }}", "home_assistant_domain": "esphome", "new_install_improv_wait_time": 15, "builds":.}' output/*/manifest.json > output/${{ inputs.manifest_filename }}
      - uses: actions/upload-artifact@v4.3.5
        with:
          name: ${{ inputs.name }}
          path: output

  publish:
    name: Publish new firmware and website to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4.1.7

      # Download fw build artifacts
      - uses: actions/download-artifact@v4.1.8
        with:
          path: output
          name: ${{ inputs.name }}
        if: ${{ inputs.build_fw }}  # only download if there's a new build

      - run: mkdir -p output  # create output if it doesn't already exist
      - run: cp -R static/* output
      - name: Print output folder structure
        run: find output/

      - name: Deploy ðŸš€ (pages + new fw)
        uses: JamesIves/github-pages-deploy-action@v4.6.3
        if: ${{ inputs.build_fw }}
        with:
          branch: gh-pages
          folder: output
          clean: ${{ inputs.clean }}
      - name: Deploy ðŸš€ (pages only)
        uses: JamesIves/github-pages-deploy-action@v4.6.3
        if: ${{ !inputs.build_fw }}
        with:
          branch: gh-pages
          folder: output
          clean: ${{ inputs.clean }}
          # When we only build website (no fw), leave the fw files alone
          clean-exclude: |
            manifest.json
            *esp*/*
